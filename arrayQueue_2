#include <stdio.h>  
#include <stdlib.h>  
#include <stdbool.h>  
#define MAX 10

//Array Queue implementation (Variation 2) - Circular queue with sacrificial space
//Sacrificial space is always the space before front: [(front - 1 + MAX) % MAX]

typedef struct {
    int items[MAX];  // Array to store queue elements
    int front;       // Index of the front and rear elements
    int rear;        
} Queue;

Queue* initialize();
bool isEmpty(Queue* q);
bool isFull(Queue* q);
bool enqueue(Queue* q, int value);
int dequeue(Queue* q);
int peek(Queue* q);
void display(Queue* q);
void displayArray(Queue* q);
void destroyQueue(Queue* q);

Queue* initialize() {
    // Allocate memory for the Queue structure
    Queue* q = (Queue*)malloc(sizeof(Queue));
    
    if (q == NULL) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    
    // Initialize front to 1 and rear to 0
    // This creates the initial sacrificial space at index 0
    q->front = 1;
    q->rear = 0;
    
    // gi initialize nkong array elements to 0 pero optional rani js for a cleaner display
    for (int i = 0; i < MAX; i++) {
        q->items[i] = 0;
    }
    
    // Return the pointer to the initialized queue
    return q;
}

bool isEmpty(Queue* q) {
    if (q == NULL) {
        return true; // Consider NULL queue as empty
    }
    
    // Queue is empty if front == (rear + 1) % MAX this means the sacrificial space is immediately before the front
    /* ~ kay lets say the rear is 0 so 0+1 % 5 (MAX) and 1 modulo 5 = 1 so front == to 1 because 0 is the sacrificial space*/
    // This means the sacrificial space is immediately before front
    return (q->front == (q->rear + 1) % MAX);
}

bool isFull(Queue* q) {
    if (q == NULL) {
        return false; // Consider NULL queue as not full
    }
    
    // Queue is full if front == (rear + 2) % MAX
    /* so let's */
    // This means there's only one empty space (the sacrificial space) left
    return (q->front == (q->rear + 2) % MAX);
}

// Enqueue (add) a new value to the rear of the queue
bool enqueue(Queue* q, int value) {
    // Check if the queue pointer is valid
    if (q == NULL) {
        printf("Invalid queue!\n");
        return false; // Operation failed
    }
    
    // Check if the queue is full
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue %d.\n", value);
        return false; // Operation failed
    }
    
    // Increment the rear pointer circularly
    // rear = (rear + 1) % MAX
    q->rear = (q->rear + 1) % MAX;
    
    // Insert the new element at the new rear position
    q->items[q->rear] = value;
    
    printf("Enqueued %d at position %d\n", value, q->rear);
    return true; // Operation successful
}

// Dequeue (remove and return) the front value from the queue
int dequeue(Queue* q) {
    // Check if the queue is empty
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1; // Return -1 as error indicator
    }
    
    // Get the element at the front of the queue
    int data = q->items[q->front];
    
    printf("Dequeued %d from position %d\n", data, q->front);
    
    // Optional: Clear the dequeued position (for cleaner display)
    q->items[q->front] = 0;
    
    // Increment the front pointer circularly
    // front = (front + 1) % MAX
    q->front = (q->front + 1) % MAX;
    
    // Return the dequeued element
    return data;
}

// Get the front element without removing it from the queue
int peek(Queue* q) {
    // Check if the queue is empty
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot get front element.\n");
        return -1; // Return -1 as error indicator
    }
    
    // Return the element at the current front position
    return q->items[q->front];
}

// Display all elements in the queue from front to rear
void display(Queue* q) {
    // Check if the queue is empty
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return; // Nothing to display
    }
    
    printf("Queue elements (front to rear): ");
    
    // Calculate the sacrificial space position
    int sacrificial = (q->front - 1 + MAX) % MAX;
    
    // Start from front and loop through the queue circularly until rear
    int current = q->front;
    
    // Loop through the queue from front to rear
    while (true) {
        printf("%d ", q->items[current]);
        
        // If we've reached the rear, break
        if (current == q->rear) {
            break;
        }
        
        // Move to next position circularly
        current = (current + 1) % MAX;
    }
    
    printf("\n");
    
    // Display queue status information
    printf("Front index: %d, Rear index: %d, Sacrificial space: %d\n", 
           q->front, q->rear, sacrificial);
}

// Display the entire array with markers for better understanding
void displayArray(Queue* q) {
    printf("Queue array: [");
    for (int i = 0; i < MAX; i++) {
        printf("%d", q->items[i]);
        if (i < MAX - 1) printf(", ");
    }
    printf("]\n");

    printf("Front index: %d, Rear index: %d\n", q->front, q->rear);
    printf("Sacrificial space index: %d\n", (q->front - 1 + MAX) % MAX);
}

// Helper function to free the queue structure
void destroyQueue(Queue* q) {
    if (q != NULL) {
        free(q);
    }
}

int main() {
    Queue* myQueue = initialize();
    if (myQueue == NULL) return 1;

    printf("=== Simple Queue Demo ===\n");

    // Initial state
    displayArray(myQueue);

    // Enqueue some elements
    printf("\nAdding elements...\n");
    enqueue(myQueue, 10);
    enqueue(myQueue, 20);
    enqueue(myQueue, 30);
    displayArray(myQueue);
    display(myQueue);

    // Show front element
    printf("Front element: %d\n", peek(myQueue));

    // Dequeue two elements
    printf("\nRemoving two elements...\n");
    dequeue(myQueue);
    dequeue(myQueue);
    displayArray(myQueue);
    display(myQueue);

    // Final state
    printf("\nFinal queue state:\n");
    displayArray(myQueue);
    display(myQueue);

    destroyQueue(myQueue);
    return 0;
}