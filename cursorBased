#include <stdio.h>
#include <stdlib.h>
#define MAX 10

//a cell structure to represent each node in the list
typedef struct {
    int elem; //the data stored in the cell
    int next; //index of the next cell in the heap (not a pointer)
} Cell, HeapSpace[MAX]; //heapspace is an array of MAX Cells

//the virtual heap structure
typedef struct {
    HeapSpace H;
    int avail;
} VHeap;

typedef int List; // head index of list

void initialize(VHeap *V) {
    for (int i = 0; i < MAX - 1; i++) {
        V->H[i].next = i + 1;
    }
    V->H[MAX - 1].next = -1; // last available cell
    V->avail = 0; // first free cell
}

int allocSpace(VHeap *V) {
    int temp = V->avail;
    if (temp != -1) {
        V->avail = V->H[temp].next; 
    }
    return temp; 
}

void freeSpace(VHeap *V, int index) {
    if (index != -1) {
        V->H[index].next = V->avail;
        V->avail = index;
    }
}

void insertFirst(List *L, VHeap* V, int elem) {
    int newCell = allocSpace(V);
    if (newCell != -1) {
        V->H[newCell].elem = elem;
        V->H[newCell].next = *L;
        *L = newCell;
    }
}

void insertLast(List *L, VHeap *V, int elem) {
    int newCell = allocSpace(V);
    if (newCell != -1) {
        V->H[newCell].elem = elem;
        V->H[newCell].next = -1;

        if (*L == -1) { // empty list
            *L = newCell;
        } else {
            int trav = *L;
            while (V->H[trav].next != -1) {
                trav = V->H[trav].next;
            }
            V->H[trav].next = newCell;
        }
    }
}

void deleteElem(List *L, VHeap* V, int elem) {
    int *trav;
    int temp;
    for (trav = L; *trav != -1 && V->H[*trav].elem != elem; trav = &V->H[*trav].next) {}
    if (*trav != -1) {
        temp = *trav;
        *trav = V->H[*trav].next;
        freeSpace(V, temp);
    }
}

void display(List L, VHeap V) {
    while (L != -1) {
        printf("%d -> ", V.H[L].elem);
        L = V.H[L].next;
    }
    printf("NULL\n");
}

int main() {
    VHeap V;
    List L = -1;  

    initialize(&V);

    insertFirst(&L, &V, 10);
    insertFirst(&L, &V, 20);
    insertLast(&L, &V, 30);
    insertLast(&L, &V, 40);

    display(L, V);

    deleteElem(&L, &V, 30);
    display(L, V);

    return 0;
}
